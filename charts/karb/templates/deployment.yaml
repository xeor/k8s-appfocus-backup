apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
{{- include "karb.labels" . | indent 4 }}
  {{- if .Values.operator.deploymentAnnotations }}
  annotations:
{{ toYaml .Values.operator.deploymentAnnotations | indent 8 }}
  {{- end }}
  name: {{ template "karb.fullname" . }}
  namespace: {{ template "karb.namespace" $ }}
spec:
  replicas: 1  # Should be 1 on kopf operators!
  revisionHistoryLimit: {{ .Values.operator.revisionHistoryLimit }}
  strategy:
    # Should be set to Recreate on kopf operators!
    type: Recreate
  selector:
    matchLabels:
      {{- include "karb.selectorLabels" . | indent 6 }}
  template:
    metadata:
    {{- if .Values.operator.podAnnotations }}
{{ toYaml .Values.operator.podAnnotations | indent 8 }}
    {{- end }}
      labels:
        {{- include "karb.labels" . | indent 8 }}
      {{- if .Values.operator.podLabels }}
{{ toYaml .Values.operator.podLabels | indent 8 }}
      {{- end }}
    spec:
    {{- if .Values.operator.priorityClassName }}
      priorityClassName: "{{ .Values.operator.priorityClassName }}"
    {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.operator.serviceAccountName }}
      automountServiceAccountToken: true
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.operator.image.repository }}:{{ .Values.operator.image.tag }}"
        imagePullPolicy: {{ .Values.operator.image.pullPolicy }}
        command: ["/usr/local/bin/kopf", "run"]
        args:
        {{- if .Values.operator.livenessProbe.enabled }}
          - --liveness=http://0.0.0.0:8080/healthz
        {{- end }}
        {{- if .Values.config.verbose }}
          - --verbose
        {{- end }}
        {{- if .Values.config.allNamespaces }}
          - --all-namespaces
        {{- else if .Values.config.namespaces }}
          - --namespace
          - {{ include "joinListWithComma" .Values.config.namespaces }}
        {{- else }}
          {{- fail "Either 'allNamespaces' or 'namespaces' must be defined." }}
        {{- end }}
          - /src/main.py
{{- if .Values.lifecycle }}
        lifecycle:
{{ toYaml .Values.lifecycle | indent 10 }}
{{- end }}
        env:
        - name: NFS_SERVER
          value: {{ .Values.config.nfsServer }}
        - name: NFS_ROOT_PATH
          value: {{ .Values.config.nfsRootPath }}
        {{- if .Values.operator.extraEnv }}
{{ tpl (toYaml .Values.operator.extraEnv) . | indent 8 }}
        {{- end }}
{{- if .Values.operator.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: {{ .Values.operator.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.operator.livenessProbe.timeoutSeconds }}
{{- end }}
        resources:
{{ toYaml .Values.operator.resources | indent 10 }}
        volumeMounts:
          - mountPath: /karb-data-root
            name: backup-volume
          - name: cert-volume
            mountPath: "/etc/certs"
            readOnly: true
{{- if ne (len .Values.operator.extraVolumeMounts) 0 }}
{{ toYaml .Values.operator.extraVolumeMounts | indent 8 }}
{{- end }}
{{- if .Values.operator.securityContext.enabled }}
{{- $securityContext := unset .Values.operator.securityContext "enabled" }}
        securityContext:
          {{- toYaml $securityContext | nindent 10 }}
{{- end }}
{{- if .Values.operator.extraContainers }}
  {{- toYaml .Values.operator.extraContainers | nindent 6 }}
{{- end }}
      volumes:
        - name: backup-volume
          nfs:
            path: {{ .Values.config.nfsRootPath }}
            server: {{ .Values.config.nfsServer }}
        - name: cert-volume
          secret:
            secretName: karb-admission-certificate-secret
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
{{- if ne (len .Values.operator.extraVolumes) 0 }}
{{ toYaml .Values.operator.extraVolumes | indent 6 }}
{{- end }}

      {{- if .Values.operator.image.pullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.pullSecrets | indent 8 }}
      {{- end }}
    {{- if .Values.operator.affinity }}
      affinity:
{{ toYaml .Values.operator.affinity | indent 8 }}
    {{- end }}
    {{- if .Values.operator.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.operator.nodeSelector | indent 8 }}
    {{- end }}
      tolerations:
{{ toYaml .Values.operator.tolerations | indent 8 }}
      {{- with .Values.operator.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
